import{_ as c,c as o,d,o as a}from"./app-DkcWcFp2.js";const p={};function s(t,e){return a(),o("div",null,e[0]||(e[0]=[d('<h1 id="项目五——优惠券全套业务与样式污染" tabindex="-1"><a class="header-anchor" href="#项目五——优惠券全套业务与样式污染"><span>项目五——优惠券全套业务与样式污染</span></a></h1><p>项目五是一个<code>react</code>项目，功能可以说是一个外卖平台，我并没有系统学习过<code>react</code>，但恰巧开始学习<code>Taro+React</code>写小程序，因此也是有了更好的学习机会。</p><p>因为最近要学的，要做的都非常多，所以我并不能很详细地进行记录，不过我遇到了一个典型问题，让我非常希望记录下来：也就是标题上的<strong>样式污染</strong></p><p>之所以那么想记录，一是我的记性不好，如果不及时写下来我可能会忘记；二是我很久之前就有看到过相关的问题，但从来没遇到过，甚至不明白为什么有这种情况，今天终于遇到了，并且顺利解决了这个问题：</p><p><strong>样式污染</strong>是指在一个组件或页面中，由于 CSS 样式的全局性，导致某些样式影响到其他组件或页面的现象。在项目的进行过程中，很多<code>page</code>中都有表格，每个<code>page</code>目录下都有自己的<code>.less</code>文件，<em>注意到由于表格格式高度类似，因此这些<code>.less</code>文件都是相同的（为后续埋下隐患）；</em> 由于新的表格与之前的很多表格样式接近但并不相同，因此我继续复制了其他组件一直使用的<code>.less</code>文件，并根据页面的需求进行调整，在这期间我遇到了奇怪的现象：</p><p>1.将样式中<code>margin-top</code>设为<code>0</code>后，对应部分<code>margin-top</code>没有改变；于是我使用了<code>!important</code>，修改成功，没有再深究；</p><p>2.到了另一个<code>page</code>，它的<code>margin-top</code>为<code>70px</code>，再次尝试使用<code>!important</code>，修改失败。使用<code>F12</code>开发者工具，选中对应元素可以看到它并没有外边距，查看样式，发现有很多完全同名的类选择器，其中就有第<code>1</code>点中提到的<code>page</code>的<code>.less</code>文件，这令我很诧异，因为每个<code>.less</code>文件都是在各自的<code>page</code>下的<code>index.jsx</code>文件引入，各自使用各自的<code>.less</code>样式，怎么会影响到其他<code>page</code>里去呢？而且有这么多的同名的类选择器，意味着样式文件没有隔离，而是混在一起。</p><p>这和我之前了解过的样式污染一样，但我还是第一次见，原理上是因为<code>CSS</code>没有本地作用域，所有声明的样式都是全局的（<code>global styles</code>）。换句话来说页面上任意元素只要匹配上某个选择器的规则，这个规则就会被应用上，而且规则和规则之间可以叠加作用（<code>cascading</code>）。<code>SPA</code>应用流行了之后这个问题变得更加突出了，因为对于<code>SPA</code>应用来说所有页面的样式代码都会加载到同一个环境中，样式冲突的概率会大大加大。这个项目正是<code>SPA</code>应用。</p><p>至于之前我自己从来没遇到过这种情况，原因主要是我几乎不重复使用<code>className</code>名，而且常用框架是<code>Vue</code>，<code>Vue</code>中关于样式使用了<code>scoped</code>属性，并且也正是由于学习了<code>scoped</code>属性，我在样式命名时更小心地避免使用重复的<code>className</code>名，因为哪怕是<code>scoped</code>属性也要求最外层的<code>className</code>不可重复。</p><p>分析了项目，前面也讲过，新的表格与之前的很多表格样式接近但并不相同，因此其实我只需要对这个新的<code>page</code>的样式文件进行处理即可，我将所有的<code>.itemxxx</code>统一更改为<code>.couponItemxxx</code>，避免了重名，也就消除了样式污染的问题。</p><h2 id="外卖平台优惠券业务——需求与完成" tabindex="-1"><a class="header-anchor" href="#外卖平台优惠券业务——需求与完成"><span>外卖平台优惠券业务——需求与完成</span></a></h2><p>现在我需要写简历，因此要补充这部分业务的实现与问题了：</p><h3 id="优惠券页面构建" tabindex="-1"><a class="header-anchor" href="#优惠券页面构建"><span>优惠券页面构建</span></a></h3><p>需求需要在外卖系统构建一个优惠券路由页面，显示平台给用户发放的优惠券，并且可显示优惠券的状态：未使用、已使用、已过期；</p><p>页面可选择优惠券类型展示：全部、未使用、已使用、已过期；</p><p>可选择有效期展示：使用日期选择器选择时间范围，展示在对应时间范围内可用的优惠券；</p><p>对于SPA应用，多个页面样式总是有重复内容，因此参照着以前实现过的页面，很快可以构建出这个全新的页面</p><h3 id="优惠券对其他各个模块的影响处理" tabindex="-1"><a class="header-anchor" href="#优惠券对其他各个模块的影响处理"><span>优惠券对其他各个模块的影响处理</span></a></h3><p>另外，优惠券发放，就会出现用户购物时是否使用优惠券以及使用优惠券是什么类型、价格的实时计算与变化，订单金额是否达到使用优惠券的要求；</p><p>售后时，也要处理用户订单是否使用优惠券，原价和实际支付金额分别是多少，如果要撤销订单，申请退款又应该根据是否使用优惠券的不同情况进行不同操作；</p><p>因此全套业务需要考虑的内容并不少</p><p>对于这一系列问题，我和后端人员多次沟通交流共同确定方案，最终一步一步解决了这些问题：</p><h2 id="购物车付款页面" tabindex="-1"><a class="header-anchor" href="#购物车付款页面"><span>购物车付款页面</span></a></h2><p>在购物车付款页面，增加优惠券选项，增加实付金额和原金额的显示；</p><p>对于优惠券选项，下拉显示不使用优惠券、满10-5优惠券等优惠券类型，只有当金额达到对应价格时显示优惠券选项，比如满10元才会显示满10-5优惠券的选项；设置一个方法，传入优惠券信息，根据当前订单金额与优惠券使用金额匹配计算是否达到优惠券使用金额，返回布尔值决定在下拉选项中是否显示该优惠券。</p><p>对于实付金额的计算，由于跟优惠券优惠金额有关，需要根据原金额与优惠金额相减计算得到，通过前端实时匹配优惠金额实时计算实付金额，无需在用户选择、切换优惠券时发送请求获取金额，减小后端压力；</p><h2 id="订单页面" tabindex="-1"><a class="header-anchor" href="#订单页面"><span>订单页面</span></a></h2><p>订单页面包括未付款订单和已付款订单，对于未付款的订单点击处理，可以显示与购物车付款页面基本相同的内容，因此处理逻辑与上面基本相同。</p><p>对于已付款的订单主要是增加实付金额和原金额的显示，其他功能基本不变。</p>',29)]))}const l=c(p,[["render",s]]),i=JSON.parse('{"path":"/guide/theFirstInternship/gain9.html","title":"项目五——优惠券全套业务与样式污染","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"外卖平台优惠券业务——需求与完成","slug":"外卖平台优惠券业务——需求与完成","link":"#外卖平台优惠券业务——需求与完成","children":[{"level":3,"title":"优惠券页面构建","slug":"优惠券页面构建","link":"#优惠券页面构建","children":[]},{"level":3,"title":"优惠券对其他各个模块的影响处理","slug":"优惠券对其他各个模块的影响处理","link":"#优惠券对其他各个模块的影响处理","children":[]}]},{"level":2,"title":"购物车付款页面","slug":"购物车付款页面","link":"#购物车付款页面","children":[]},{"level":2,"title":"订单页面","slug":"订单页面","link":"#订单页面","children":[]}],"git":{"updatedTime":1754730689000,"contributors":[{"name":"X4M7","username":"X4M7","email":"1415808154@qq.com","commits":2,"url":"https://github.com/X4M7"}],"changelog":[{"hash":"3ce24c795a3e0ae1ea09efa6da2095896a400e51","time":1754730689000,"email":"1415808154@qq.com","author":"X4M7","message":"补充实习一的经历，记录实习二的收获"},{"hash":"48604fd3bb29bf0d70d743a96f22c7319b644520","time":1749741534000,"email":"1415808154@qq.com","author":"X4M7","message":"小插曲补充完善、项目五略微记录，并记录样式污染以及解决方案"}]},"filePathRelative":"guide/theFirstInternship/gain9.md"}');export{l as comp,i as data};
